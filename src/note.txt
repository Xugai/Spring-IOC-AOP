bean的作用域：
	1.singleton：单例，指一个bean容器中只存在一份
	2.prototype：每次请求创建（或每次使用）时创建新的实例，对于destroy方法不生效
	
bean的生命周期：
	1.定义，指在spring的xml配置文件中进行bean的id声明和class的使用
	2.初始化，指在spring的IOC容器中依照xml配置文件中bean的定义生成一个bean的实例
	3.使用，指在单元测试中或实际开发中从IOC容器中取出这个bean的实例
	4.销毁，使用完这个bean实例后，连同这个bean所拥有的数据成员、方法成员也一同销毁
	
！注意：当我们在xml配置文件进行bean的配置时，若使用了<property name=""></property>这对标签，则
	我们要在该bean（类）中定义getter和setter方法，否则IOC容器在初始化bean时会报错
	
bean初始化有三种途径：
	1.在声明bean的同时使用init-method="方法名"和destroy-method="方法名"，
	2.实现spring的默认接口：InitializingBean（初始化）,DisposableBean（销毁），并重写这两个接
		口所定义的afterPropertiesSet方法和destroy方法
	3.在xml配置文件开头进行default-init-method和default-destroy-method的声明
！注意：当这三种方法同时使用时，最先执行的是spring默认的初始化和销毁这两个接口里面的初始化和销毁方法，其次
	是自己在bean标签中使用的init-method和destroy-method，xml配置文件开头声明的default-init-
	method和default-destroy-method将不会执行，（不会生效，会被覆盖掉）
	
・Spring中提供了一些以Aware结尾的接口，实现了Aware接口的bean在被初始化之后，可以获取相应的资源
・通过Aware接口，可以对Spring的相应资源进行操作
・以Aware结尾的接口为对Spring进行简单的扩展提供了方便的入口

bean的自动装配（Autowiring）：
	1.No
	2.byName
	3.byType：如果在xml文件中配置了多个同类型的bean，则该自动注入方式会报错。因为该方式找到了多个匹配
			的类型的bean，不知道到底要注入哪一个bean才对。尤其要注意那种实现了同一种接口的类的bean，
			对于多个bean，这些bean都实现了同一个接口，则IOC在执行此项方法时也会认为这些实现了同一接口
			的bean都是同类型的，照样也会报错	
	4.Constructor 